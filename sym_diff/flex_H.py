import taichi as ti
import taichi.math as math
@ti.func
def flex_H(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4, e_bar, theta_bar, h_bar):
 x0 = -y3
 x5 = x0 + y2
 x6 = x1 - x2
 x7 = -y4
 x8 = x7 + y1
 x9 = -x4
 x10 = x1 + x9
 x11 = y1 - y2
 x12 = x10*x11 - x6*x8
 x13 = x12*x5
 x14 = x7 + y2
 x15 = x0 + y1
 x16 = -x3
 x17 = x1 + x16
 x18 = x11*x17 - x15*x6
 x19 = x14*x18
 x20 = -z3
 x21 = x20 + z2
 x22 = -z4
 x23 = x22 + z1
 x24 = z1 - z2
 x25 = x10*x24 - x23*x6
 x26 = x21*x25
 x27 = x22 + z2
 x28 = x20 + z1
 x29 = x17*x24 - x28*x6
 x30 = x27*x29
 x31 = x12*x29 - x18*x25
 x32 = -x11*x23 + x24*x8
 x33 = -x11*x28 + x15*x24
 x34 = x12*x33 - x18*x32
 x35 = x25*x33 - x29*x32
 x36 = x31**2 + x34**2 + x35**2
 x37 = math.sqrt(x36)
 x38 = x12*x18 + x25*x29 + x32*x33
 x39 = 1/(x36 + x38**2)
 x40 = x37*x39
 x41 = x32*x5
 x42 = x14*x33
 x43 = x21*x32
 x44 = -x27*x33
 x45 = x25*x5
 x46 = x18*x27
 x47 = x14*x29
 x48 = x12*x21
 x49 = 1/x37
 x50 = x38*x39*x49
 x51 = 2*e_bar*(theta_bar - math.atan2(x37, -x38))/h_bar
 x52 = x16 + x2
 x53 = x12*x52
 x54 = x2 + x9
 x55 = x18*x54
 x56 = x25*x52
 x57 = x29*x54
 x58 = x32*x52 - x33*x54
 x59 = x12*x15
 x60 = x18*x8
 x61 = x25*x28
 x62 = x23*x29
 x63 = x15*x32
 x64 = x33*x8
 x65 = x28*x32
 x66 = -x23*x33
 x67 = x15*x25
 x68 = x18*x23
 x69 = x29*x8
 x70 = x12*x28
 x71 = x12*x17
 x72 = x10*x18
 x73 = x17*x25
 x74 = x10*x29
 x75 = -x10*x33 + x17*x32
 x76 = x11*x12
 x77 = x24*x25
 x78 = x11*x32
 x79 = x24*x32
 x80 = x11*x25
 x81 = x12*x24
 x82 = x12*x6
 x83 = x25*x6
 x84 = x32*x6
 x85 = x11*x18
 x86 = x24*x29
 x87 = x11*x33
 x88 = x24*x33
 x89 = x11*x29
 x90 = x18*x24
 x91 = x18*x6
 x92 = x29*x6
 x93 = x33*x6
 dx1x1 = x51*(x40*(x13 + x19 + x26 + x30) + x50*(x31*(x45 + x46 - x47 - x48) + x34*(x41 - x42) + x35*(x43 + x44)))
 dx1y1 = -x51*(x40*(-x43 + x44 + x53 + x55) + x50*(x31*(x56 - x57) + x34*(-x46 + x48 + x58) + x35*(x26 - x30)))
 dx1z1 = x51*(-x40*(x41 + x42 + x56 + x57) + x50*(x31*(x53 - x55) + x34*(x13 - x19) - x35*(-x45 + x47 + x58)))
 dx1x2 = -x51*(x40*(x59 + x60 + x61 + x62) + x50*(x31*(x67 + x68 - x69 - x70) + x34*(x63 - x64) + x35*(x65 + x66)))
 dx1y2 = x51*(x40*(-x65 + x66 + x71 + x72) + x50*(x31*(x73 - x74) + x34*(-x68 + x70 + x75) + x35*(x61 - x62)))
 dx1z2 = -x51*(-x40*(x63 + x64 + x73 + x74) + x50*(x31*(x71 - x72) + x34*(x59 - x60) - x35*(-x67 + x69 + x75)))
 dx1x3 = x51*(x40*(x76 + x77) + x50*(x31*(x80 - x81) + x34*x78 + x35*x79))
 dx1y3 = -x51*(x40*(-x79 + x82) + x50*(x31*x83 + x34*(x81 + x84) + x35*x77))
 dx1z3 = x51*(x38*x39*x49*(x31*x82 + x34*x76 - x35*(-x80 + x84)) - x40*(x78 + x83))
 dx1x4 = -x51*(x38*x39*x49*(x31*(x89 - x90) + x34*x87 + x35*x88) - x40*(x85 + x86))
 dx1y4 = x51*(x38*x39*x49*(x31*x92 + x34*(x90 + x93) + x35*x86) - x40*(-x88 + x91))
 dx1z4 = -x51*(x40*(x87 + x92) + x50*(x31*x91 + x34*x85 - x35*(-x89 + x93)))
 return dx1x1, dx1y1, dx1z1, dx1x2, dx1y2, dx1z2, dx1x3, dx1y3, dx1z3, dx1x4, dx1y4, dx1z4, dy1x1, dy1y1, dy1z1, dy1x2, dy1y2, dy1z2, dy1x3, dy1y3, dy1z3, dy1x4, dy1y4, dy1z4, dz1x1, dz1y1, dz1z1, dz1x2, dz1y2, dz1z2, dz1x3, dz1y3, dz1z3, dz1x4, dz1y4, dz1z4, dx2x1, dx2y1, dx2z1, dx2x2, dx2y2, dx2z2, dx2x3, dx2y3, dx2z3, dx2x4, dx2y4, dx2z4, dy2x1, dy2y1, dy2z1, dy2x2, dy2y2, dy2z2, dy2x3, dy2y3, dy2z3, dy2x4, dy2y4, dy2z4, dz2x1, dz2y1, dz2z1, dz2x2, dz2y2, dz2z2, dz2x3, dz2y3, dz2z3, dz2x4, dz2y4, dz2z4, dx3x1, dx3y1, dx3z1, dx3x2, dx3y2, dx3z2, dx3x3, dx3y3, dx3z3, dx3x4, dx3y4, dx3z4, dy3x1, dy3y1, dy3z1, dy3x2, dy3y2, dy3z2, dy3x3, dy3y3, dy3z3, dy3x4, dy3y4, dy3z4, dz3x1, dz3y1, dz3z1, dz3x2, dz3y2, dz3z2, dz3x3, dz3y3, dz3z3, dz3x4, dz3y4, dz3z4, dx4x1, dx4y1, dx4z1, dx4x2, dx4y2, dx4z2, dx4x3, dx4y3, dx4z3, dx4x4, dx4y4, dx4z4, dy4x1, dy4y1, dy4z1, dy4x2, dy4y2, dy4z2, dy4x3, dy4y3, dy4z3, dy4x4, dy4y4, dy4z4, dz4x1, dz4y1, dz4z1, dz4x2, dz4y2, dz4z2, dz4x3, dz4y3, dz4z3, dz4x4, dz4y4, dz4z4, 